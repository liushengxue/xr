{"version":3,"file":"static/js/EntryProduct.77ba75af.chunk.js","mappings":"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","sources":["pages/hooks/useLoading.js","pages/store/EditProductModal.js","pages/store/EntryProduct.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nexport default function useLoading(req) {\n  const [loading, setLoading] = useState(false);\n  \n  const wrapReq = useCallback(\n    (...args) => {\n      setLoading(true);\n      return req(...args)\n        .then((data) => {\n          setLoading(false);\n          return Promise.resolve(data);\n        })\n        .catch((reason) => {\n          setLoading(false);\n          return Promise.reject(reason);\n        });\n    },\n    [req]\n  );\n  return [loading, wrapReq];\n}\n","import React, { useState, useEffect, Fragment } from 'react';\nimport { Divider, Modal, Table, Popover, Form, Input, Select, Button, message } from 'antd';\nimport { FormOutlined } from '@ant-design/icons';\nimport useLoading from '../hooks/useLoading';\nimport { getOrderListByNum, updateOrder } from '../../api/api';\n\nfunction EditProductModal({ current, onclose }) {\n  const [data, updateData] = useState([]);\n  const [visible, updateVisible] = useState(false);\n  const [loading, req] = useLoading(getOrderListByNum);\n  const [loading2, req2] = useLoading(updateOrder);\n\n  const columns = [\n    { title: '类别', dataIndex: 'type_name' },\n    { title: '型号', dataIndex: 'model_name' },\n    { title: '品牌', dataIndex: 'brand_name' },\n    { title: '备注', dataIndex: 'note' },\n    { title: '需求量', dataIndex: 'count' },\n    { title: '实到量', dataIndex: 'real_count' },\n    { title: '完成状态', dataIndex: 'status' },\n    { title: '备注', dataIndex: 'note' },\n    { title: '库存地址', dataIndex: 'storage_address' },\n    {\n      title: '操作',\n      key: 'id',\n      render: (record) => {\n        return (\n          <Fragment>\n            <Popover\n              open={visible === record.id}\n              onOpenChange={(v) => toggle(v, record)}\n              content={getContent(record)}\n              trigger=\"click\"\n              placement=\"topRight\"\n            >\n              <a>\n                <FormOutlined style={{ marginRight: 4 }} />\n                编辑货物\n              </a>\n            </Popover>\n          </Fragment>\n        );\n      },\n    },\n  ];\n\n  useEffect(() => {\n    if (current.num) {\n      getList();\n    }\n  }, []);\n\n  const toggle = (v, record) => {\n    const newVisible = !v ? false : record.id;\n    updateVisible(newVisible);\n  };\n\n  const getList = () => {\n    req({ num: current.num }).then((res) => {\n      if (res?.code === 200) {\n        updateData(res?.result);\n      }\n    });\n  };\n\n  const getContent = (item) => {\n    return (\n      <Form\n        labelCol={{ span: 8 }}\n        wrapperCol={{ span: 16 }}\n        initialValues={{\n          id: item.id,\n          realCount: item.real_count,\n          status: item.status,\n          storageAddress: item.storage_address,\n        }}\n        onFinish={onFinish}\n        style={{ margin: '15px 20px 0 0 ' }}\n      >\n        <Form.Item label=\"实到量\" name=\"id\" style={{ display: 'none' }}>\n          <Input />\n        </Form.Item>\n        <Form.Item label=\"实到量\" name=\"realCount\">\n          <Input placeholder=\"请填写实到量\" />\n        </Form.Item>\n        <Form.Item label=\"完成状态\" name=\"status\">\n          <Select>\n            <Select.Option value=\"未入库\">未入库</Select.Option>\n            <Select.Option value=\"入库未丝印\">入库未丝印</Select.Option>\n            <Select.Option value=\"入库完成\">入库完成</Select.Option>\n          </Select>\n        </Form.Item>\n        <Form.Item label=\"库存地址\" name=\"storageAddress\">\n          <Input placeholder=\"请填写库存地址\" />\n        </Form.Item>\n        <Form.Item wrapperCol={{ offset: 18 }}>\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading2}>\n            提交\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  };\n\n  async function onFinish(values) {\n    console.log(values);\n    const res = await req2(values);\n    if (res?.code === 200) {\n      message.success('修改成功');\n      getList();\n      updateVisible(false);\n    } else {\n      message.error('修改失败');\n    }\n  }\n\n  return (\n    <Modal title=\"编辑货物单\" open footer={null} width=\"1400px\" onCancel={() => onclose()}>\n      <Table rowKey=\"id\" dataSource={data} loading={loading} columns={columns} pagination={{}} bordered size=\"small\" />\n    </Modal>\n  );\n}\n\nexport default EditProductModal;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport { Card, Table } from 'antd';\nimport moment from 'moment/moment';\nimport { FormOutlined } from '@ant-design/icons';\nimport EditProductModal from './EditProductModal';\nimport useLoading from '../hooks/useLoading';\nimport { getEntryList } from '../../api/api';\n\nfunction EntryProduct() {\n  const [current, updateCurrent] = useState({});\n  const [data, updateData] = useState([]);\n  const [loading, req] = useLoading(getEntryList);\n\n  useEffect(() => {\n    getList();\n  }, []);\n\n  const columns = [\n    { title: '订单编号', dataIndex: 'num' },\n    { title: '日期', key: 'create_time', render: (record) => moment(record.create_time).format('YYYY-MM-DD HH:mm:ss') },\n    { title: '客户', dataIndex: 'custom_name' },\n    { title: '业务员', dataIndex: 'name' },\n    {\n      title: '操作',\n      key: 'id',\n      render: (record) => (\n        <a onClick={() => toggleCurrent(record)}>\n          <FormOutlined style={{ marginRight: 4 }} />\n          编辑货物单\n        </a>\n      ),\n    },\n  ];\n\n  const getList = (value) => {\n    req({ name: value }).then((res) => {\n      if (res?.code === 200) {\n        updateData(res?.result);\n      }\n    });\n  };\n\n  const toggleCurrent = (item = {}) => {\n    updateCurrent(item);\n  };\n\n  return (\n    <Fragment>\n      <Card bordered={false}>\n        <div style={{ marginBottom: 10 }}>{/* <Input.Search placeholder=\"搜索\" style={{ width: 300 }} allowClear onSearch={onSearch} /> */}</div>\n\n        <Table dataSource={data} loading={loading} rowKey=\"id\" columns={columns} pagination={{}} bordered size=\"small\" />\n      </Card>\n\n      {current.id && <EditProductModal current={current} onclose={toggleCurrent} />}\n    </Fragment>\n  );\n}\n\nexport default EntryProduct;\n"],"names":["useLoading","req","useState","loading","setLoading","wrapReq","useCallback","then","data","Promise","resolve","catch","reason","reject","current","onclose","updateData","visible","updateVisible","getOrderListByNum","updateOrder","loading2","req2","columns","title","dataIndex","key","render","record","Fragment","open","id","onOpenChange","v","toggle","content","getContent","trigger","placement","FormOutlined","style","marginRight","useEffect","num","getList","newVisible","res","code","result","item","labelCol","span","wrapperCol","initialValues","realCount","real_count","status","storageAddress","storage_address","onFinish","margin","label","name","display","placeholder","value","offset","type","htmlType","values","console","log","message","footer","width","onCancel","rowKey","dataSource","pagination","bordered","size","updateCurrent","getEntryList","moment","create_time","format","onClick","toggleCurrent","marginBottom"],"sourceRoot":""}